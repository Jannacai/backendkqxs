const express = require('express');
const router = express.Router();
const XSMT = require('../../models/XS_MT.models');
const { getLoGanStats, getSpecialPrizeStats, getDauDuoiStats, getDauDuoiStatsByDate, getSpecialPrizeStatsByWeek, getTanSuatLotoStats, getTanSuatLoCapStats } = require('../../controllers/xsmbController');
const { getBachThuMT, getProvinces } = require('../../controllers/soiCauMTController');
const rateLimit = require('express-rate-limit');
const redis = require('redis');
const cron = require('node-cron');
const moment = require('moment');

// K·∫øt n·ªëi Redis
const redisClient = redis.createClient({
    url: process.env.REDIS_URL || 'redis://localhost:6379',
});

// H√†m retry cho thao t√°c Redis
const retryOperation = async (operation, maxRetries = 3, delay = 1000) => {
    let lastError;
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            return await operation();
        } catch (error) {
            lastError = error;
            console.error(`Th·ª≠ l·∫ßn ${attempt}/${maxRetries} th·∫•t b·∫°i:`, error.message);
            if (attempt === maxRetries) break;
            await new Promise(resolve => setTimeout(resolve, delay));
        }
    }
    throw lastError;
};

// K·∫øt n·ªëi Redis v·ªõi retry
const connectRedis = async () => {
    if (!redisClient.isOpen) {
        await retryOperation(() => redisClient.connect(), 3, 1000);
    }
};
connectRedis().catch(err => console.error('L·ªói k·∫øt n·ªëi Redis:', err));

// B·ªî SUNG: Helper function ƒë·ªÉ l·∫•y th·ªùi gian Vi·ªát Nam v√† ki·ªÉm tra 17h35
const getVietnamTime = () => {
    const now = new Date();
    return new Date(now.toLocaleString('en-US', { timeZone: 'Asia/Ho_Chi_Minh' }));
};
const isAfter1735 = () => {
    const vietnamTime = getVietnamTime();
    return vietnamTime.getHours() === 17 && vietnamTime.getMinutes() >= 35;
};

// T√≠nh to√°n tr∆∞·ªõc d·ªØ li·ªáu th·ªëng k√™ v√† x√≥a cache (ch·∫°y l√∫c 17h35 m·ªói ng√†y - ƒê·ªíNG B·ªò V·ªöI FRONTEND)
cron.schedule('35 17 * * *', async () => {
    console.log('üïê 17h35 - B·∫Øt ƒë·∫ßu x√≥a cache v√† t√≠nh to√°n th·ªëng k√™...');
    try {
        const today = new Date().toLocaleDateString('vi-VN', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
        }).replace(/\//g, '-');
        const cacheKeysToDelete = [
            `kqxs:xsmt:${today}:30:1`,
            `kqxs:xsmt:modal:latest`,
            `kqxs:xsmt:all:30`,
            `kqxs:all:30`
        ];
        for (const key of cacheKeysToDelete) {
            await redisClient.del(key);
            console.log(`üóëÔ∏è ƒê√£ x√≥a cache: ${key}`);
        }
        console.log('‚úÖ ƒê√£ x√≥a cache XSMT ƒë·ªÉ frontend l·∫•y d·ªØ li·ªáu m·ªõi');
    } catch (error) {
        console.error('‚ùå L·ªói khi x√≥a cache:', error);
    }
    console.log('T√≠nh to√°n tr∆∞·ªõc th·ªëng k√™ l√¥ gan XSMT...');
    const daysOptions = [6, 7, 14, 30, 60];
    const provinces = ['hue', 'phu-yen', 'dak-lak', 'quang-nam', 'khanh-hoa', 'da-nang', 'binh-dinh', 'quang-tri', 'ninh-thuan', 'gia-lai', 'quang-ngai', 'dak-nong', 'kon-tum'];
    for (const tinh of provinces) {
        for (const days of daysOptions) {
            const result = await getLoGanStats({ query: { days, station: 'xsmt', tinh } }, { status: () => ({ json: () => { } }) });
            const cacheKey = `loGan:xsmt:${days}:${tinh}`;
            await redisClient.setEx(cacheKey, 86400, JSON.stringify(result));
        }
    }

    console.log('T√≠nh to√°n tr∆∞·ªõc th·ªëng k√™ gi·∫£i ƒë·∫∑c bi·ªát XSMT...');
    const specialDaysOptions = [10, 20, 30, 60, 90, 180, 270, 365];
    for (const tinh of provinces) {
        for (const days of specialDaysOptions) {
            const result = await getSpecialPrizeStats({ query: { days, station: 'xsmt', tinh } }, { status: () => ({ json: () => { } }) });
            const cacheKey = `specialPrize:xsmt:${days}:${tinh}`;
            await redisClient.setEx(cacheKey, 86400, JSON.stringify(result));
        }
    }

    console.log('T√≠nh to√°n tr∆∞·ªõc th·ªëng k√™ ƒë·∫ßu ƒëu√¥i XSMT...');
    const dauDuoiDaysOptions = [30, 60, 90, 120, 180, 365];
    for (const tinh of provinces) {
        for (const days of dauDuoiDaysOptions) {
            const result = await getDauDuoiStats({ query: { days, station: 'xsmt', tinh } }, { status: () => ({ json: () => { } }) });
            const cacheKey = `dauDuoi:${days}:${tinh}`;
            await redisClient.setEx(cacheKey, 86400, JSON.stringify(result));
        }
    }

    console.log('T√≠nh to√°n tr∆∞·ªõc th·ªëng k√™ ƒë·∫ßu ƒëu√¥i theo ng√†y XSMT...');
    for (const tinh of provinces) {
        for (const days of dauDuoiDaysOptions) {
            const result = await getDauDuoiStatsByDate({ query: { days, station: 'xsmt', tinh } }, { status: () => ({ json: () => { } }) });
            const cacheKey = `dauDuoiByDate:${days}:${tinh}`;
            await redisClient.setEx(cacheKey, 86400, JSON.stringify(result));
        }
    }

    console.log('T√≠nh to√°n tr∆∞·ªõc danh s√°ch t·ªânh XSMT...');
    const today = moment().format('DD/MM/YYYY');
    const currentTime = new Date();
    const thresholdTime = new Date(currentTime);
    thresholdTime.setHours(17, 35, 0, 0);
    const targetDate = currentTime > thresholdTime ? moment(today, 'DD/MM/YYYY').add(1, 'days').format('DD/MM/YYYY') : today;
    const result = await getProvinces({ query: { date: targetDate } }, { status: () => ({ json: () => { } }) });
    const cacheKey = `provinces:${targetDate}`;
    await redisClient.setEx(cacheKey, 86400, JSON.stringify(result));
});

// Rate limiter cho c√°c endpoint th√¥ng th∆∞·ªùng
const apiLimiter = rateLimit({
    windowMs: 60 * 1000,
    max: 100,
    message: { error: 'Qu√° nhi·ªÅu y√™u c·∫ßu API, vui l√≤ng th·ª≠ l·∫°i sau m·ªôt ph√∫t.' },
});

// Rate limiter cho c√°c endpoint th·ªëng k√™
const statsLimiter = rateLimit({
    windowMs: 60 * 1000,
    max: 100,
    message: { error: 'Qu√° nhi·ªÅu y√™u c·∫ßu th·ªëng k√™, vui l√≤ng th·ª≠ l·∫°i sau m·ªôt ph√∫t.' },
    keyGenerator: (req) => req.headers['x-user-id'] || req.ip,
});

// H√†m √°nh x·∫° t·ª´ kh√¥ng d·∫•u sang c√≥ d·∫•u
const mapDayOfWeek = (dayOfWeekNoAccent) => {
    const dayMap = {
        'thu-2': 'Th·ª© 2',
        'thu-3': 'Th·ª© 3',
        'thu-4': 'Th·ª© 4',
        'thu-5': 'Th·ª© 5',
        'thu-6': 'Th·ª© 6',
        'thu-7': 'Th·ª© 7',
        'chu-nhat': 'Ch·ªß nh·∫≠t'
    };
    return dayMap[dayOfWeekNoAccent.toLowerCase()] || dayOfWeekNoAccent;
};

// Danh s√°ch KQXS (tr·∫£ v·ªÅ t·∫•t c·∫£, s·∫Øp x·∫øp theo ng√†y m·ªõi nh·∫•t)
router.get('/xsmt', apiLimiter, async (req, res) => {
    try {
        const { forceRefresh, liveWindow, page = 1, limit = 3, daysPerPage = 3 } = req.query;
        const now = new Date();
        const vietnamTime = new Date(now.toLocaleString('en-US', { timeZone: 'Asia/Ho_Chi_Minh' }));
        const vietnamHours = vietnamTime.getHours();
        const vietnamMinutes = vietnamTime.getMinutes();
        const isLiveWindow = vietnamHours === 17 && vietnamMinutes >= 10 && vietnamMinutes <= 59;
        const isPostLiveWindow = vietnamHours > 17 || (vietnamHours === 17 && vietnamMinutes > 59);

        // Cache key v·ªõi page v√† daysPerPage
        const cacheKey = `kqxs:xsmt:page:${page}:daysPerPage:${daysPerPage}:${isLiveWindow ? 'live' : 'normal'}`;
        const cached = await redisClient.get(cacheKey);

        // Logic cache invalidation th√¥ng minh
        const shouldForceRefresh = isAfter1735(); // Use helper
        const shouldUseCache = cached && !forceRefresh && !liveWindow && !shouldForceRefresh;
        const cacheDuration = isLiveWindow ? 60 : 300; // 1 ph√∫t cho live, 5 ph√∫t cho normal

        if (shouldUseCache) {
            console.log(`üì¶ Tr·∫£ v·ªÅ cached data: ${cacheKey}`);
            return res.status(200).json(JSON.parse(cached));
        }

        console.log(`üîÑ Fetching fresh data t·ª´ MongoDB: ${cacheKey}, page: ${page}, daysPerPage: ${daysPerPage}${shouldForceRefresh ? ' (sau 17h35)' : ''}`);

        // L·∫•y t·∫•t c·∫£ unique dates ƒë·ªÉ t√≠nh to√°n pagination theo ng√†y
        const allDates = await XSMT.find().lean()
            .sort({ drawDate: -1 })
            .distinct('drawDate');

        // S·∫Øp x·∫øp l·∫°i dates theo th·ª© t·ª± m·ªõi nh·∫•t (v√¨ distinct c√≥ th·ªÉ kh√¥ng gi·ªØ th·ª© t·ª±)
        const sortedDates = allDates.sort((a, b) => new Date(b) - new Date(a));

        // T√≠nh to√°n skip cho pagination theo ng√†y
        const skipDays = (parseInt(page) - 1) * parseInt(daysPerPage);
        const targetDates = sortedDates.slice(skipDays, skipDays + parseInt(daysPerPage));

        console.log(`üìä Pagination debug:`, {
            totalDates: sortedDates.length,
            page: parseInt(page),
            daysPerPage: parseInt(daysPerPage),
            skipDays,
            targetDates: targetDates.map(d => new Date(d).toLocaleDateString('vi-VN')),
            firstDate: sortedDates[0] ? new Date(sortedDates[0]).toLocaleDateString('vi-VN') : 'N/A',
            lastDate: sortedDates[sortedDates.length - 1] ? new Date(sortedDates[sortedDates.length - 1]).toLocaleDateString('vi-VN') : 'N/A'
        });

        if (targetDates.length === 0) {
            return res.status(404).json({ error: 'Result not found' });
        }

        // L·∫•y t·∫•t c·∫£ records cho c√°c ng√†y ƒë∆∞·ª£c ch·ªçn
        const results = await XSMT.find({
            drawDate: { $in: targetDates }
        }).lean()
            .sort({ drawDate: -1, tentinh: 1 });

        // Cache v·ªõi duration ph√π h·ª£p
        await redisClient.setEx(cacheKey, cacheDuration, JSON.stringify(results));
        console.log(`‚úÖ ƒê√£ cache data: ${cacheKey}, duration: ${cacheDuration}s, results: ${results.length}, dates: ${targetDates.length}`);

        res.status(200).json(results);
    } catch (error) {
        console.error('‚ùå L·ªói fetch XSMT data:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

// Danh s√°ch t·ªânh XSMT theo ng√†y
router.get('/xsmt/provinces', apiLimiter, async (req, res) => {
    try {
        const { date } = req.query;
        if (!date || date.trim() === '') {
            return res.status(400).json({ error: 'Date cannot be empty' });
        }

        const currentTime = new Date();
        const thresholdTime = new Date(currentTime);
        thresholdTime.setHours(17, 35, 0, 0);
        const isAfterResultTime = currentTime > thresholdTime;
        const targetDate = isAfterResultTime ? moment(date, 'DD/MM/YYYY').add(1, 'days').format('DD/MM/YYYY') : date;

        const cacheKey = `provinces:${targetDate}`;
        const cached = await redisClient.get(cacheKey);
        const shouldForceRefresh = isAfter1735(); // Use helper
        if (cached && !shouldForceRefresh) {
            console.log(`üì¶ Cache hit cho provinces: ${cacheKey}`);
            return res.status(200).json(JSON.parse(cached));
        }
        console.log(`üîÑ Fetching fresh provinces data: ${cacheKey}${shouldForceRefresh ? ' (sau 17h35)' : ''}`);

        const dayOfWeek = moment(targetDate, 'DD/MM/YYYY').format('dddd');
        const schedule = {
            'Monday': ['Hu·∫ø', 'Ph√∫ Y√™n'],
            'Tuesday': ['ƒê·∫Øk L·∫Øk', 'Qu·∫£ng Nam'],
            'Wednesday': ['ƒê√† N·∫µng', 'Kh√°nh H√≤a'],
            'Thursday': ['B√¨nh ƒê·ªãnh', 'Qu·∫£ng Tr·ªã', 'Qu·∫£ng B√¨nh'],
            'Friday': ['Gia Lai', 'Ninh Thu·∫≠n'],
            'Saturday': ['ƒê√† N·∫µng', 'Qu·∫£ng Ng√£i', 'ƒê·∫Øk N√¥ng'],
            'Sunday': ['Kon Tum', 'Kh√°nh H√≤a', 'Th·ª´a Thi√™n Hu·∫ø'],
        };
        let provinces = schedule[dayOfWeek] || [];

        if (provinces.length === 0) {
            const results = await XSMT.find({
                drawDate: moment(targetDate, 'DD/MM/YYYY').toDate(),
            }).distinct('tinh').lean();
            provinces = results.length > 0 ? results : ['Hu·∫ø', 'Ph√∫ Y√™n'];
            console.warn(`Danh s√°ch t·ªânh r·ªóng t·ª´ l·ªãch, d√πng d·ªØ li·ªáu MongoDB ho·∫∑c fallback: ${provinces}`);
        }

        await redisClient.setEx(cacheKey, 86400, JSON.stringify(provinces));
        console.log(`ƒê√£ cache danh s√°ch t·ªânh: ${cacheKey}, provinces: ${provinces}`);
        res.status(200).json(provinces);
    } catch (error) {
        console.error('Error in getProvinces route:', error.message);
        res.status(500).json({ error: `Kh√¥ng th·ªÉ t·∫£i danh s√°ch t·ªânh: ${error.message}. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ch·ªçn ng√†y kh√°c. G·ª£i √Ω: ${moment().format('DD/MM/YYYY')}` });
    }
});

// Danh s√°ch KQXS theo slug
router.get('/:slug', apiLimiter, async (req, res) => {
    const { slug } = req.params;
    try {
        if (!slug || slug.trim() === '') {
            return res.status(400).json({ error: 'Slug cannot be empty' });
        }

        const cacheKey = `kqxs:xsmt:slug:${slug}`;
        const cached = await redisClient.get(cacheKey);
        if (cached) {
            return res.status(200).json(JSON.parse(cached));
        }

        const result = await XSMT.findOne({ slug }).lean()
            .sort({ drawDate: -1 });

        if (!result) {
            return res.status(404).json({ error: 'Result not found' });
        }

        await redisClient.setEx(cacheKey, 60, JSON.stringify(result));
        res.status(200).json(result);
    } catch (error) {
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

// Danh s√°ch KQXS theo th·ª©
router.get('/xsmt/:dayOfWeek', apiLimiter, async (req, res) => {
    const { dayOfWeek } = req.params;
    try {
        if (!dayOfWeek || dayOfWeek.trim() === '') {
            return res.status(400).json({ error: 'dayOfWeek cannot be empty' });
        }

        const cacheKey = `kqxs:xsmt:day:${dayOfWeek}`;
        const cached = await redisClient.get(cacheKey);
        if (cached) {
            return res.status(200).json(JSON.parse(cached));
        }

        const mappedDayOfWeek = mapDayOfWeek(dayOfWeek);
        console.log("Mapped dayOfWeek:", mappedDayOfWeek);
        const results = await XSMT.find({
            dayOfWeek: mappedDayOfWeek
        }).lean()
            .sort({ drawDate: -1 });

        console.log("Results:", results);
        if (!results || results.length === 0) {
            return res.status(404).json({ error: 'No results found for this day' });
        }

        await redisClient.setEx(cacheKey, 60, JSON.stringify(results));
        res.status(200).json(results);
    } catch (error) {
        console.error("Error:", error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

// Danh s√°ch KQXS theo t·ªânh
router.get('/xsmt/tinh/:tinh', apiLimiter, async (req, res) => {
    const { tinh } = req.params;
    try {
        if (!tinh || tinh.trim() === '') {
            return res.status(400).json({ error: 'Tinh cannot be empty' });
        }

        const cacheKey = `kqxs:xsmt:tinh:${tinh}`;
        const cached = await redisClient.get(cacheKey);
        if (cached) {
            return res.status(200).json(JSON.parse(cached));
        }

        const result = await XSMT.find({ tinh: tinh }).lean()
            .sort({ drawDate: -1 });

        if (!result || result.length === 0) {
            return res.status(404).json({ error: `Result not found for tinh: ${tinh}` });
        }

        await redisClient.setEx(cacheKey, 60, JSON.stringify(result));
        res.status(200).json(result);
    } catch (error) {
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

// Th·ªëng k√™ l√¥ gan
router.get('/xsmt/statistics/gan', statsLimiter, async (req, res) => {
    req.query.station = 'xsmt';
    await getLoGanStats(req, res);
});

// Th·ªëng k√™ gi·∫£i ƒë·∫∑c bi·ªát
router.get('/xsmt/statistics/special', statsLimiter, async (req, res) => {
    req.query.station = 'xsmt';
    await getSpecialPrizeStats(req, res);
});

// Th·ªëng k√™ ƒê·∫ßu ƒêu√¥i
router.get('/xsmt/statistics/dau-duoi', statsLimiter, async (req, res) => {
    req.query.station = 'xsmt';
    await getDauDuoiStats(req, res);
});

// Th·ªëng k√™ ƒê·∫ßu ƒêu√¥i theo ng√†y
router.get('/xsmt/statistics/dau-duoi-by-date', statsLimiter, async (req, res) => {
    req.query.station = 'xsmt';
    await getDauDuoiStatsByDate(req, res);
});

router.get('/xsmt/statistics/special-by-week', statsLimiter, async (req, res) => {
    req.query.station = 'xsmt';
    await getSpecialPrizeStatsByWeek(req, res);
});

// Th·ªëng k√™ t·∫ßn su·∫•t loto
router.get('/xsmt/statistics/tan-suat-loto', statsLimiter, async (req, res) => {
    req.query.station = 'xsmt';
    await getTanSuatLotoStats(req, res);
});

// Th·ªëng k√™ t·∫ßn su·∫•t l√¥ c·∫∑p
router.get('/xsmt/statistics/tan-suat-lo-cap', statsLimiter, async (req, res) => {
    req.query.station = 'xsmt';
    await getTanSuatLoCapStats(req, res);
});

// Soi c·∫ßu b·∫°ch th·ªß XSMT
router.get('/xsmt/soicau/soi-cau-bach-thu', apiLimiter, async (req, res) => {
    await getBachThuMT(req, res);
});

// Invalidate cache khi c√≥ data m·ªõi (ƒë∆∞·ª£c g·ªçi t·ª´ scraper)
router.post('/xsmt/invalidate-cache', async (req, res) => {
    try {
        const { date, tinh } = req.body;
        const cacheKeys = [
            'kqxs:xsmt:page:*', // X√≥a t·∫•t c·∫£ page cache
            'kqxs:xsmt:all:live',
            'kqxs:xsmt:all:normal',
            `kqxs:xsmt:day:*`,
            `kqxs:xsmt:tinh:*`
        ];

        // X√≥a t·∫•t c·∫£ cache li√™n quan
        for (const pattern of cacheKeys) {
            const keys = await redisClient.keys(pattern);
            if (keys.length > 0) {
                await redisClient.del(keys);
                console.log(`üßπ ƒê√£ x√≥a ${keys.length} cache keys v·ªõi pattern: ${pattern}`);
            }
        }

        console.log(`‚úÖ ƒê√£ invalidate cache cho date: ${date}, tinh: ${tinh}`);
        res.status(200).json({ message: 'Cache invalidated successfully' });
    } catch (error) {
        console.error('‚ùå L·ªói invalidate cache:', error);
        res.status(500).json({ error: 'Failed to invalidate cache' });
    }
});

// Health check endpoint
router.get('/xsmt/health', (req, res) => {
    res.status(200).json({
        status: 'OK',
        timestamp: new Date().toISOString(),
        cache: 'active'
    });
});

// Debug endpoint ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu
router.get('/xsmt/debug', async (req, res) => {
    try {
        const allDates = await XSMT.find().lean()
            .sort({ drawDate: -1 })
            .distinct('drawDate');

        const sortedDates = allDates.sort((a, b) => new Date(b) - new Date(a));

        const latestRecords = await XSMT.find().lean()
            .sort({ drawDate: -1 })
            .limit(10);

        res.status(200).json({
            totalDates: sortedDates.length,
            latestDates: sortedDates.slice(0, 10).map(d => new Date(d).toLocaleDateString('vi-VN')),
            latestRecords: latestRecords.map(r => ({
                drawDate: new Date(r.drawDate).toLocaleDateString('vi-VN'),
                tentinh: r.tentinh,
                tinh: r.tinh
            })),
            currentTime: new Date().toLocaleDateString('vi-VN')
        });
    } catch (error) {
        console.error('‚ùå L·ªói debug endpoint:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

module.exports = router;